// Code generated by goctl. DO NOT EDIT.

export interface UserBasic {
  id: string;
  nickname: string;
  nicknameType: number; // 1:"general nickname"; 2:"ens nickname"
  discriminator: string;
  avatar: string;
  avatarType: number; // 1:"general avatar"; 2:"nft avatar"
  status?: number; // 1:"online";2:"idle";3:"busy";4:"invisible"
  activityTime?: string;
  activityTimestamp?: number;
  followStatus?: number; // 1:"unfollowed";2:"single following";3:"mutual following"
  remarkName?: string;
  canSendMessage?: boolean;
}

export interface ServerMemberRoleOverview {
  id: string;
  name: string;
  addedWith: number;
}

export interface ServerMember {
  id: string;
  nickname: string;
  nicknameType: number;
  discriminator: string;
  avatar: string;
  avatarType: number;
  status?: number;
  muteRemainTime?: number;
  roles?: Array<ServerMemberRoleOverview>;
  isOwner?: boolean;
  isAdmin?: boolean;
  deleted: boolean; // whether this user deleted
}

export interface ServerBasic {
  id: string;
  name: string;
  introduction: string;
  avatar: string;
  banner: string;
  verified: boolean;
  defaultChannelId: string;
  link?: string;
  owner: string;
}

export interface IMTokenInfo {
  token: string;
  expiredTime: number;
}

export interface SignInWithEmailRequest {
  email: string;
  code: string; // code received from verification email
}

export interface EmailSignInResponse {
  token: string;
  userId: string;
  credential: string; // if not registered, return credential
}

export interface SignUpRequest {
  credential: string;
  nickname: string;
}

export interface SignUpResponse {
  token: string;
  userId: string;
}

export interface GetWalletNonceRequest {}

export interface GetWalletNonceRequestParams {
  address: string; // wallet address
}

export interface GetWalletNonceResponse {
  nonce: string; // original message of signature
}

export interface SignInWithWalletRequest {
  address: string; // wallet address
  signature: string; // message's signature
}

export interface WalletSignInResponse {
  token: string;
  userId: string;
  credential: string; // if not registered, return credential
}

export interface SendEmailRequest {
  email: string;
}

export interface VerifyEmailRequest {
  email: string;
  code: string; // code received from verification email
}

export interface VerifyEmailResponse {
  credential: string;
}

export interface VerifyWalletRequest {
  address: string; // wallet address
  signature: string; // message's signature
}

export interface VerifyWalletResponse {
  credential: string;
}

export interface GetSignInQrCodeRequest {}

export interface GetSignInQrCodeRequestParams {
  deviceId: string; // todo
}

export interface QrCode {
  qrcode: string;
}

export interface GetQrCodeStatusRequest {}

export interface GetQrCodeStatusRequestParams {
  qrcode: string;
}

export interface QrCodeStatus {
  status: number; // 1:"to be scanned";2:"to be confirmed";3:"confirmed";4:"expired"
  token: string;
  userId: string;
}

export interface AppConfig {
  s3Endpoint: string;
  inviteEndpoint: string;
}

export interface UserConfig {
  language: string;
  timeZone: string;
}

export interface GetIMTokenResponse {
  token: string;
  expiredTime: number;
}

export interface ScanQrCodeResponse {
  credential: string; // temporary credential for login with QrCode
}

export interface ConfirmQrCodeRequest {
  credential: string; // temporary credential for login with QrCode
}

export interface UploadDeviceInfoRequest {
  deviceId: string;
  deviceInfo: string; // json serialized string
  cid?: string;
}

export interface UserProfileRequest {}

export interface UserProfileRequestParams {
  userId: string; // @me for current user
}

export interface UserProfileAvatar {
  type: number; // 1:"general avatar";2:"nft avatar"
  url: string;
  inUse: boolean;
}

export interface UserConnection {
  type: number; // third-party application type;1:"twitter"
  id: string; // user id of the third-party account
  name: string; // username of the third-party account
  verified: boolean; // whether to verify
}

export interface UserNickname {
  type: number; // 1:"general nickname";2:"ens nickname"
  nickname: string;
  inUse: boolean;
}

export interface UserEns {
  domain: string;
  inUse: boolean;
}

export interface UserEnsInfo {
  ens: Array<string>;
}

export interface UserToken {
  logo: string;
  name: string;
  percentage: string;
  url: string;
}

export interface UserTokenInfo {
  total: number;
  price: string;
  tokens: Array<UserToken>;
}

export interface UserPOAP {
  image: string;
  name: string;
  description: string;
  date: number;
  url: string;
}

export interface UserPOAPInfo {
  total: number;
  poaps: Array<UserPOAP>;
}

export interface UserNFT {
  image: string;
  name: string;
  url: string;
}

export interface UserNFTInfo {
  total: number;
  nfts: Array<UserNFT>;
}

export interface UserProfile {
  userId: string;
  avatar: string;
  avatarType: number; // 1:"general avatar"; 2:"nft avatar"
  nickname: string;
  nicknameType: number; // 1:"general nickname"; 2:"ens nickname"
  discriminator: string; // the 4-digit tag
  remarkName: string; // remark name you set for him
  bio: string;
  walletAddress: string;
  status: number; // 1:"online"; 2:"free"; 3:"busy"; 4:"hiding"
  followStatus: number; // 1:"unfollowed"; 2:"single following"; 3:"mutual following"
  block: boolean; // you have blocked him
  blocked: boolean; // you are blocked by him
  deleted: boolean; // whether this user deleted
  connections: Array<UserConnection>; // user-associated third-party application accounts
  mutualServers: UserServerList; // return all mutual servers
  mutualFollowing: UserFollowing; // return all mutual followings
  tokens: UserTokenInfo; // return the first page of data
  poaps: UserPOAPInfo; // return the first page of data
  nfts: UserNFTInfo; // return the first page of data
}

export interface GetUserBaseInfoRequest {}

export interface GetUserBaseInfoRequestParams {
  userId: string; // @me for current user
}

export interface UserBaseInfo {
  userId: string;
  nicknames: Array<UserNickname>;
  discriminator: string; // the 4-digit tag (part of the user nickname)
  bio: string;
  email: string;
  walletAddress: string;
  avatars: Array<UserProfileAvatar>;
  status: number; // 1:"online";2:"free";3:"busy";4:"hiding"
  connections: Array<UserConnection>; // user-associated third-party application accounts
}

export interface ModifyUserProfileRequest {
  generalNickname?: string; // modify general nickname
  ensNickname?: string; // change the ens nickname in use
  nicknameInUse?: number; // change which nickname to use, 1:"general nickname", 2:"ens nickname"
  generalAvatar?: string; // modify general avatar
  nftAvatar?: string; // change the nft avatar in use
  avatarInUse?: number; // change which avatar to use, 1:"general avatar", 2:"nft avatar"
  bio?: string; // self-introduction of users
  status?: number; // 1:"online";2:"free";3:"busy";4:"hiding"
}

export interface ModifyUserProfileRequestParams {
  userId: string;
}

export interface ModifyUserRemarkRequest {
  userId: string; // target user id
  remark: string; // the remark name for target user
}

export interface BindEmailRequest {
  email: string;
  code: string; // code received from verification email
  credential: string;
}

export interface BindWalletRequest {
  address: string; // wallet address
  signature: string; // message's signature
  credential: string;
}

export interface GetUserEnsRequest {}

export interface GetUserEnsRequestParams {
  userId: string;
}

export interface GetUserTokensRequest {}

export interface GetUserTokensRequestParams {
  userId: string;
}

export interface GetUserNFTsRequest {}

export interface GetUserNFTsRequestParams {
  userId: string;
  offset: number;
}

export interface GetUserPOAPsRequest {}

export interface GetUserPOAPsRequestParams {
  userId: string;
}

export interface UserPrivacySettingRequest {}

export interface UserPrivacySettingRequestParams {
  userId: string;
}

export interface UserDirectMessageSetting {
  everyone: boolean;
  followers: boolean;
}

export interface UserProfileSetting {
  wallets: boolean;
  ens: boolean;
  connections: boolean; // associated third party accounts
  mutualServers: boolean;
  mutualFollowing: boolean;
  tokens: boolean;
  poaps: boolean;
  nfts: boolean;
}

export interface UserPrivacySetting {
  directMessage: UserDirectMessageSetting; // who can sent you direct message
  profile: UserProfileSetting; // user profile display settings
  blockCount: number;
  serverCount: number;
}

export interface ModifyUserPrivacySettingRequest {
  everyone?: boolean;
  followers?: boolean;
  wallets?: boolean;
  ens?: boolean;
  connections?: boolean; // associated third party accounts
  mutualServers?: boolean;
  mutualFollowing?: boolean;
  tokens?: boolean;
  poaps?: boolean;
  nfts?: boolean;
}

export interface ModifyUserPrivacySettingRequestParams {
  userId: string;
}

export interface ServerPrivacySettingRequest {}

export interface ServerPrivacySettingRequestParams {
  userId: string;
}

export interface ServerDirectMessageSetting {
  serverId: string;
  serverName: string;
  serverAvatar: string;
  allow: boolean;
}

export interface ServerPrivacySetting {
  serverDirectMessage: Array<ServerDirectMessageSetting>;
}

export interface ModifyServerPrivacySettingRequest {
  serverId: string;
  allow: boolean;
}

export interface ModifyServerPrivacySettingRequestParams {
  userId: string;
}

export interface UserNotificationSettingRequest {}

export interface UserNotificationSettingRequestParams {
  userId: string;
}

export interface UserNotificationSettingResponse {
  user: UserNotificationSetting;
  servers: Array<UserServerNotificationSetting>;
}

export interface UserMuteSetting {
  remain: number;
}

export interface UserGlobalNotificationSetting {
  desktop: boolean;
  system: boolean;
  stranger: boolean;
  serverMember: boolean;
  following: boolean; // private messages from users I follow
  allServerMessages: boolean;
  serverAtMe: boolean;
  serverAtRole: boolean;
  serverAtEveryone: boolean;
}

export interface UserNotificationSetting {
  mute: UserMuteSetting; // global mute settings
  global: UserGlobalNotificationSetting; // global notification settings
}

export interface ModifyUserNotificationSettingRequest {
  duration?: number;
  desktop?: boolean;
  system?: boolean;
  stranger?: boolean;
  serverMember?: boolean;
  following?: boolean;
  allServerMessages?: boolean;
  serverAtMe?: boolean;
  serverAtRole?: boolean;
  serverAtEveryone?: boolean;
}

export interface ModifyUserNotificationSettingRequestParams {
  userId: string;
}

export interface GetUserServersNotificationsSettingsRequest {}

export interface GetUserServersNotificationsSettingsRequestParams {
  userId: string;
}

export interface GetUserServersNotificationsSettingsResponse {
  notifications: Array<UserServerNotificationSetting>;
}

export interface SingleServerNotificationSettingRequest {}

export interface SingleServerNotificationSettingRequestParams {
  userId: string;
  serverId: string;
}

export interface UserServerNotificationSetting {
  id: string;
  name: string;
  avatar: string;
  allServerMessages: boolean;
  allowAllMessages: boolean;
  atMe: boolean;
  atRole: boolean;
  atEveryone: boolean;
  allMute: boolean;
}

export interface ServerNotificationSetting {
  servers: Array<UserServerNotificationSetting>; // servers notification settings
}

export interface ModifyServerNotificationSettingRequest {
  allServerMessages: boolean;
  atMe?: boolean; // pass this parameter only when it changes
  atRole?: boolean; // pass this parameter only when it changes
  atEveryone?: boolean; // pass this parameter only when it changes
  allMute: boolean;
}

export interface ModifyServerNotificationSettingRequestParams {
  userId: string;
  serverId: string;
}

export interface GetChannelNotificationSettingRequest {}

export interface GetChannelNotificationSettingRequestParams {
  userId: string;
  channelId: string;
}

export interface UserServerChannelNotificationSetting {
  channelId: string;
  channelName: string;
  allowAllMessages: boolean;
  allChannelMessages: boolean;
  atMe: boolean;
  atRole: boolean;
  atEveryone: boolean;
  allMute: boolean;
}

export interface ModifyChannelNotificationSettingRequest {
  allChannelMessages?: boolean;
  atMe?: boolean;
  atRole?: boolean;
  atEveryone?: boolean;
  allMute?: boolean;
}

export interface ModifyChannelNotificationSettingRequestParams {
  userId: string;
  channelId: string;
}

export interface GetServerChannelsNotificationsSettingsRequest {}

export interface GetServerChannelsNotificationsSettingsRequestParams {
  userId: string;
  serverId: string;
}

export interface GetServerChannelsNotificationsSettingsResponse {
  notifications: Array<UserServerChannelNotificationSetting>;
}

export interface UserFollowingRequest {}

export interface UserFollowingRequestParams {
  userId: string;
  offset: number;
  sort: number; // 1:"activity time"; 2:"name"; 3:"follow each other"
}

export interface UserFollowing {
  total: number;
  friends: Array<UserBasic>;
}

export interface SearchUserFollowingRequest {}

export interface SearchUserFollowingRequestParams {
  userId: string;
  query: string; // fuzzy search, hitting nickname or discriminator
  offset: number;
}

export interface SearchUserBasicInfoRequest {}

export interface SearchUserBasicInfoRequestParams {
  keyword: string;
}

export interface FollowUserByIdRequest {
  from: number; // 1:"profile page" 2:"search page"
}

export interface FollowUserByIdRequestParams {
  userId: string; // @me
  followUserId: string;
}

export interface FollowStatus {
  followStatus: number; // 1:"unfollowed";2:"single following";3:"mutual following"
}

export interface UserUnfollowRequest {}

export interface UserUnfollowRequestParams {
  userId: string; // @me
  unfollowUserId: string;
}

export interface GetUserBlockRequest {}

export interface GetUserBlockRequestParams {
  userId: string; // @me
}

export interface UserBlockList {
  users: Array<UserBasic>;
}

export interface GetUserBlockCountRequest {}

export interface GetUserBlockCountRequestParams {
  userId: string; // @me
}

export interface BlockUserRequest {}

export interface BlockUserRequestParams {
  userId: string;
  blockUserId: string;
}

export interface UnblockUserRequest {}

export interface UnblockUserRequestParams {
  userId: string;
  unblockUserId: string;
}

export interface UserJoinServerRequest {
  serverId?: string;
  invite?: string;
}

export interface UserJoinServerRequestParams {
  userId: string;
}

export interface TargetChannel {
  id: string;
  type: number;
}

export interface UserJoinServerResponse {
  server: ServerBasic;
  targetChannel: TargetChannel;
}

export interface UserLeaveServerRequest {}

export interface UserLeaveServerRequestParams {
  userId: string;
  serverId: string;
}

export interface GetUsersRelationshipRequest {
  userIds: Array<string>;
}

export interface UserRelationship {
  userId: string;
  nickname: string;
  nicknameType: number; // 1:"general nickname"; 2:"ens nickname"
  discriminator: string;
  avatar: string;
  avatarType: number; // 1:"general avatar"; 2:"nft avatar"
  status: number; // 1:"online";2:"idle";3:"busy";4:"invisible"
  relationship: number; // 1:Unknown; 2:Server DM; 3:Following DM
  mutualServerCount: number;
}

export interface GetUsersRelationshipResponse {
  relationships: Array<UserRelationship>;
}

export interface DeleteUserRequest {
  email?: string;
  code?: string; // code received from verification email
  address?: string; // wallet address
  signature?: string; // message's signature
}

export interface GetServersRequest {}

export interface GetServersRequestParams {
  offset: number;
}

export interface GetUserServersRequest {}

export interface GetUserServersRequestParams {
  userId: string;
}

export interface GetMutualServersRequest {}

export interface GetMutualServersRequestParams {
  userId: string;
}

export interface GetDifferentServersRequest {}

export interface GetDifferentServersRequestParams {
  userId: string;
}

export interface SearchServersRequest {}

export interface SearchServersRequestParams {
  query: string;
  offset: number;
}

export interface ServerLive {
  online: string; // total number of server online members
  members: string; // total number of server members
}

export interface ServerPreview {
  basic: ServerBasic;
  live: ServerLive;
}

export interface ServerList {
  total: number;
  servers: Array<ServerPreview>;
}

export interface UserServerList {
  servers: Array<ServerBasic>;
}

export interface CreateServerRequest {
  name: string;
}

export interface ServerIdRequest {}

export interface ServerIdRequestParams {
  serverId: string;
}

export interface GetServerSettingRequest {}

export interface GetServerSettingRequestParams {
  serverId: string;
  live: boolean; // whether to return online and members
}

export interface ServerSetting {
  top: boolean; // whether to sticky on top
  hideMutedChannels: boolean; // whether to hide muted channels
  directMessages: boolean; // whether to allow direct messages from server members
  createChannel: boolean; // whether to allow to create channel
  createCategory: boolean; // whether to allow to create category
  modifyServer: boolean; // whether to allow to modify server
  isOwner: boolean;
  live?: ServerLive;
}

export interface ModifyServerSettingRequest {
  top?: boolean; // whether to sticky on top
  hideMutedChannels?: boolean; // whether to hide muted channels
  directMessages?: boolean; // whether to allow direct messages from server members
}

export interface ModifyServerSettingRequestParams {
  serverId: string;
}

export interface ModifyServerPositionRequest {
  serverIds: Array<string>; // all server Ids in order
}

export interface GetServerOverviewRequest {}

export interface GetServerOverviewRequestParams {
  serverId?: string;
  invite?: string;
  userId?: string;
}

export interface ServerMemberList {
  total: number;
  members: Array<ServerMember>;
}

export interface ServerOverviewMemberList {
  total: string;
  members: Array<ServerMember>;
}

export interface ServerOverview {
  basic: ServerBasic;
  following: ServerOverviewMemberList;
  members: ServerOverviewMemberList;
  joined: boolean;
}

export interface DefaultChannelInfo {
  id: string;
  name: string;
  type: number;
}

export interface ServerModeration {
  defaultChannel: DefaultChannelInfo;
  publicServer: boolean;
  filter: boolean;
  isOwner: boolean;
}

export interface ModifyServerModerationRequest {
  defaultChannel?: string; // channelId
  publicServer?: boolean;
  filter?: boolean;
}

export interface ModifyServerModerationRequestParams {
  serverId: string;
}

export interface GetPermissionOfServerSettingRequest {}

export interface GetPermissionOfServerSettingRequestParams {
  serverId: string;
}

export interface ServerPermission {
  overview: boolean;
  moderation: boolean;
  channels: boolean;
  gating: boolean;
}

export interface UserPermission {
  members: boolean;
  roles: boolean;
  bans: boolean;
}

export interface ExtensionsPermission {
  applications: boolean;
}

export interface PermissionOfServerSetting {
  basic: ServerPermission;
  users: UserPermission;
  extensions: ExtensionsPermission;
}

export interface GetPermissionOfMemberSettingRequest {}

export interface GetPermissionOfMemberSettingRequestParams {
  serverId: string;
  memberId: string;
}

export interface PermissionOfMemberSetting {
  timeout: boolean;
  kick: boolean;
  ban: boolean;
  roles: boolean;
}

export interface ModifyServerRequest {
  name?: string;
  avatar?: string;
  introduction?: string;
  banner?: string;
}

export interface ModifyServerRequestParams {
  serverId: string;
}

export interface GetServerMembersRequest {}

export interface GetServerMembersRequestParams {
  serverId: string;
  offset: number;
  filterRoleId: string;
}

export interface GetServerMemberRequest {}

export interface GetServerMemberRequestParams {
  serverId: string;
  userId: string;
}

export interface MemberPermission {
  timeout: boolean; // whether you have the timeout permission
  kick: boolean; // whether you have the kick permission
  ban: boolean; // whether you have the ban permission
}

export interface GetServerMemberResponse {
  member: ServerMember;
  serverName: string;
  followStatus: number; // 1:"unfollowed";2:"single following";3:"mutual following"
  block: boolean; // whether you blocked him
  permission: MemberPermission;
}

export interface RoleBasic {
  id: string;
  name: string;
  priority: number;
}

export interface SearchServerMembersRequest {}

export interface SearchServerMembersRequestParams {
  serverId: string;
  query: string;
  offset: number;
  filterRoleId: string;
}

export interface TransferServerRequest {
  transferTo: string;
}

export interface TransferServerRequestParams {
  serverId: string;
}

export interface GetTransferMembersRequest {}

export interface GetTransferMembersRequestParams {
  serverId: string;
  offset: number;
}

export interface SearchTransferMembersRequest {}

export interface SearchTransferMembersRequestParams {
  serverId: string;
  offset: number;
  query: string;
}

export interface TransferMemberList {
  total: number;
  members: Array<ServerMember>;
}

export interface MuteServerMemberRequest {
  mute: number; // 1: 3 minutes; 2: 10 minutes; 3: 1 hour; 4: 1 day; 5: 1 week
}

export interface MuteServerMemberRequestParams {
  serverId: string;
  userId: string;
}

export interface UnmuteServerMemberRequest {}

export interface UnmuteServerMemberRequestParams {
  serverId: string;
  userId: string;
}

export interface KickServerMemberRequest {}

export interface KickServerMemberRequestParams {
  serverId: string;
  userId: string;
}

export interface GetServerBlockedMembersRequest {}

export interface GetServerBlockedMembersRequestParams {
  serverId: string;
  offset: number;
}

export interface ServerBlockedMemberList {
  total: number;
  members: Array<ServerMember>;
}

export interface SearchServerBlockedMembersRequest {}

export interface SearchServerBlockedMembersRequestParams {
  serverId: string;
  query: string;
  offset: number;
}

export interface BlockServerMemberRequest {}

export interface BlockServerMemberRequestParams {
  serverId: string;
  blockUserId: string;
}

export interface UnblockServerMemberRequest {}

export interface UnblockServerMemberRequestParams {
  serverId: string;
  unblockUserId: string;
}

export interface GetServerLinkRequest {}

export interface GetServerLinkRequestParams {
  serverId: string;
  channelId: string;
}

export interface ServerLink {
  link: string;
}

export interface GetServerInviteMembersRequest {}

export interface GetServerInviteMembersRequestParams {
  serverId: string;
  offset: number;
}

export interface SearchServerInviteMembersRequest {}

export interface SearchServerInviteMembersRequestParams {
  serverId: string;
  offset: number;
  query: string;
}

export interface ServerInviteMemberList {
  total: number;
  members: Array<ServerMember>;
}

export interface Role {
  id: string;
  name: string;
  priority: number;
  permissions: Permission;
  editable: boolean;
  admin: boolean;
}

export interface RoleOverview {
  id: string;
  name: string;
  count: number;
  priority: number;
  editable: boolean;
  admin: boolean;
}

export interface Permission {
  server: string;
  channel: string;
  membership: string;
  text: string;
  voice: string;
  announcement: string;
  forum: string;
}

export interface GetServerRolesRequest {}

export interface GetServerRolesRequestParams {
  serverId: string;
}

export interface GetServerRolesResponse {
  roles: Array<Role>;
  reorderable: boolean;
  revision: string;
}

export interface GetServerRoleRequest {}

export interface GetServerRoleRequestParams {
  serverId: string;
  roleId: string;
}

export interface GetServerRolesOverviewRequest {}

export interface GetServerRolesOverviewRequestParams {
  serverId: string;
  default: boolean;
  unbound: string;
}

export interface GetServerRolesOverviewResponse {
  overviews: Array<RoleOverview>;
  revision: string;
}

export interface RoleVisibilityOverview {
  id: string;
  name: string;
  priority: number;
  checked: boolean;
}

export interface GetServerRolesVisibilityOverviewRequest {
  serverId: string;
  channelId: string;
}

export interface GetServerRolesVisibilityOverviewResponse {
  overviews: Array<RoleVisibilityOverview>;
}

export interface CreateServerRoleRequest {}

export interface CreateServerRoleRequestParams {
  serverId: string;
}

export interface CreateServerRoleResponse {
  id: string;
  name: string;
  count: number;
  priority: number;
  editable: boolean;
  permissions: Permission;
  revision: string;
}

export interface ModifyServerRoleRequest {
  name?: string;
  permissions?: Permission;
}

export interface ModifyServerRoleRequestParams {
  serverId: string;
  roleId: string;
}

export interface DeleteServerRoleRequest {}

export interface DeleteServerRoleRequestParams {
  serverId: string;
  roleId: string;
}

export interface ServerRoleMemberRoleOverview {
  id: string;
  name: string;
  addedWith: number;
}

export interface ServerRoleMember {
  userId: string;
  nickname: string;
  nicknameType: number;
  avatar: string;
  avatarType: number;
  discriminator: string;
  owner: boolean;
  admin: boolean;
  roles: Array<ServerRoleMemberRoleOverview>;
  removeable: boolean;
  timeoutExpiredAt: number;
}

export interface GetServerRoleMembersRequest {}

export interface GetServerRoleMembersRequestParams {
  serverId: string;
  roleId: string;
  offset: number;
}

export interface GetServerRoleMembersResponse {
  total: number;
  members: Array<ServerRoleMember>;
}

export interface SearchServerRoleMembersRequest {}

export interface SearchServerRoleMembersRequestParams {
  serverId: string;
  roleId: string;
  query: string;
  offset: number;
}

export interface SearchServerRoleMembersResponse {
  query: string;
  members: Array<ServerRoleMember>;
}

export interface CreateServerRoleMembersRequest {
  members: Array<string>;
}

export interface CreateServerRoleMembersRequestParams {
  serverId: string; // ignore
  roleId: string; // ignore
}

export interface DeleteServerRoleMembersRequest {
  members: Array<string>;
}

export interface DeleteServerRoleMembersRequestParams {
  serverId: string; // ignore
  roleId: string; // ignore
}

export interface ServerRolePosition {
  roleId: string;
  position: number;
}

export interface ModifyServerRolePositionRequest {
  roleId: string;
  beforeRoleId: string;
  revision: string;
}

export interface ModifyServerRolePositionRequestParams {
  serverId: string;
}

export interface ModifyServerRolePositionResponse {
  revision: string;
}

export interface GetServerGuardRequest {}

export interface GetServerGuardRequestParams {
  serverId: string;
  roleId: string;
}

export interface Guard {
  conditions: Array<GuardCondition>;
}

export interface GuardCondition {
  tokenId: string;
  operator: number;
  value: string;
  next: number; // AND or OR
}

export interface GuardWithTokenName {
  conditions: Array<GuardConditionWithTokenName>;
}

export interface GuardConditionWithTokenName {
  tokenId: string;
  name: string;
  symbol: string;
  icon: string;
  operator: number;
  value: string;
  next: number; // AND or OR
}

export interface ServerGuards {
  guards: Array<Guard>;
}

export interface GetServerGuardTokensPresetRequest {}

export interface GetServerGuardTokensPresetRequestParams {
  serverId: string;
  offset: number;
  added: boolean;
}

export interface GetServerGuardTokensPresetResponse {
  total: number;
  tokens: Array<PresetGuardToken>;
}

export interface SearchServerGuardTokensRequest {}

export interface SearchServerGuardTokensRequestParams {
  serverId: string;
  query: string;
  added: boolean;
  offset: number;
}

export interface PresetGuardToken {
  type: number;
  tokenId: string;
  networkId: string;
  name: string;
  symbol: string;
  icon: string;
  decimals: number;
  contract: string;
  method?: string;
  inputs?: Array<string>;
  output?: string;
  added: boolean;
}

export interface SearchServerGuardTokensResponse {
  total: number;
  guards: Array<PresetGuardToken>;
}

export interface CreateServerGuardRequest {
  roleId: string;
  guards: Array<GuardCondition>;
}

export interface CreateServerGuardRequestParams {
  serverId: string;
}

export interface GetServerGuardsOverviewRequest {}

export interface GetServerGuardsOverviewRequestParams {
  serverId: string;
}

export interface GuardOverview {
  roleId: string;
  name: string;
  editable: boolean;
  tokens: Array<GuardOverviewToken>;
}

export interface GuardOverviewToken {
  tokenId: string;
  name: string;
  symbol: string;
  icon: string;
}

export interface GetServerGuardsOverviewResponse {
  guards: Array<GuardOverview>;
}

export interface ModifyServerGuardRequest {
  conditions: Array<GuardCondition>;
}

export interface ModifyServerGuardRequestParams {
  serverId: string;
  roleId: string;
}

export interface DeleteServerGuardRequest {}

export interface DeleteServerGuardRequestParams {
  serverId: string;
  roleId: string;
}

export interface GetServerGuardTokensRequest {}

export interface GetServerGuardTokensRequestParams {
  serverId: string;
}

export interface VerifyCustomTokenRequest {
  type: number;
  networkId: string;
  name: string;
  symbol: string;
  contract: string;
  method?: string;
  decimals?: number;
  inputs: Array<CustomTokenParameter>;
  output: CustomTokenParameter;
}

export interface VerifyCustomTokenResponse {
  succedded: boolean;
  result: string;
}

export interface GuardToken {
  type: number;
  tokenId: string;
  networkId: string;
  name: string;
  symbol: string;
  icon: string;
  decimals: number;
  contract: string;
  method?: string;
  inputs?: Array<string>;
  output?: string;
  used: boolean;
}

export interface ServerGuardTokens {
  tokens: Array<GuardToken>;
}

export interface GuardTokenNetwork {
  networkId: string;
  name: string;
}

export interface ServerGuardTokenNetworks {
  networks: Array<GuardTokenNetwork>;
}

export interface GetServerGuardTokenNetworks {}

export interface GetServerGuardTokenNetworksParams {
  serverId: string;
}

export interface CustomTokenParameter {
  name?: string;
  type: string;
  value?: string;
}

export interface CustomToken {
  type: number;
  networkId: string;
  name: string;
  symbol: string;
  decimals: number;
  contract: string;
  method?: string;
  inputs: Array<CustomTokenParameter>;
  output: CustomTokenParameter;
}

export interface CreateServerGuardTokenRequest {
  tokenId?: string;
  custom?: CustomToken;
}

export interface CreateServerGuardTokenRequestParams {
  serverId: string;
}

export interface DeleteServerGuardTokenRequest {}

export interface DeleteServerGuardTokenRequestParams {
  serverId: string;
  tokenId: string;
}

export interface RoleAllowDeny {
  allow: string;
  deny: string;
}

export interface RoleOverride {
  channel: RoleAllowDeny;
  text?: RoleAllowDeny;
  voice?: RoleAllowDeny;
  announcement?: RoleAllowDeny;
  forum?: RoleAllowDeny;
}

export interface SearchMentionsRequest {}

export interface SearchMentionsRequestParams {
  channelId: string;
  query: string;
}

export interface SearchMentionsResponse {
  query: string;
  members: Array<ChannelRoleMember>;
  roles: Array<Role>;
}

export interface GetChannelRolesRequest {}

export interface GetChannelRolesRequestParams {
  channelId: string;
}

export interface GetChannelRolesOverviewRequest {}

export interface GetChannelRolesOverviewRequestParams {
  channelId: string;
}

export interface GetChannelRolesOverviewResponse {
  roles: Array<RoleOverview>;
  attachable: boolean;
}

export interface ChannelRole {
  roleId: string;
  name: string;
  override: RoleOverride;
}

export interface GetChannelRolesResponse {
  roles: Array<ChannelRole>;
}

export interface SearchChannelRolesRequest {}

export interface SearchChannelRolesRequestParams {
  channelId: string;
  query: string;
}

export interface SearchChannelRolesResponse {
  query: string;
  roles: Array<Role>;
}

export interface CreateChannelRoleRequest {}

export interface CreateChannelRoleRequestParams {
  channelId: string; // ignore
  roleId: string; // ignore
}

export interface ModifyChannelRoleRequest {
  override: RoleOverride;
}

export interface ModifyChannelRoleRequestParams {
  channelId: string; // ignore
  roleId: string; // ignore
}

export interface ModifyChannelRoleResponse {
  permissions: Permission;
}

export interface DeleteChannelRoleRequest {}

export interface DeleteChannelRoleRequestParams {
  channelId: string;
  roleId: string;
}

export interface GetChannelRolePermissionRequest {}

export interface GetChannelRolePermissionRequestParams {
  channelId: string;
  roleId: string;
}

export interface ChannelRoleGroupSwitch {
  name: string;
  description: string;
  value: string;
  override: number; // 1: on, 0: inherit, -1: off
  editable: boolean;
}

export interface ChannelRoleGroup {
  type: string;
  name: string;
  switchs: Array<ChannelRoleGroupSwitch>;
}

export interface GetChannelRolePermissionResponse {
  groups: Array<ChannelRoleGroup>;
  attachable: boolean;
  isDefault: boolean;
  isEveryone: boolean;
}

export interface ChannelRoleMemberRole {
  name: string;
  id: string;
  total: number;
  online: number;
}

export interface ChannelRoleMemberRoleOverview {
  id: string;
  name: string;
  addedWith: number;
}

export interface ChannelRoleMember {
  basic: UserBasic;
  roles: Array<string>;
  owner: boolean;
}

export interface GetChannelRolesMembersRequest {}

export interface GetChannelRolesMembersRequestParams {
  channelId: string;
  offset: number;
}

export interface GetChannelRolesMembersResponse {
  roles: Array<ChannelRoleMemberRole>;
  members: Array<ChannelRoleMember>;
}

export interface SearchChannelMembersRequest {}

export interface SearchChannelMembersRequestParams {
  channelId: string;
  query: string;
}

export interface SearchChannelMembersResponse {
  query: string;
  members: Array<ChannelRoleMember>;
}

export interface CreateChannelRequest {
  name: string;
  type: number;
  parentId?: string;
  inherited?: boolean;
  roles: Array<string>;
  applicationId?: string;
}

export interface CreateChannelRequestParams {
  serverId: string;
}

export interface CreateChannelResponse {
  channelId: string;
  serverId: string;
  type: number;
  name: string;
  parentId: string;
  position: number;
  topic: string;
}

export interface GetChannelsRequest {}

export interface GetChannelsRequestParams {
  serverId: string;
  types: string;
}

export interface ServerChannels {
  channels: Array<Channel>;
  reorderable: boolean;
  revision: string;
}

export interface GetChannelRequest {}

export interface GetChannelRequestParams {
  channelId: string;
}

export interface ModifyChannelRequest {
  name?: string;
  topic?: string;
  parentId?: string;
}

export interface ModifyChannelRequestParams {
  channelId: string;
}

export interface ChannelPosition {
  id: string;
  position: number;
  parentId?: string;
}

export interface ModifyChannelPositionRequest {
  channelId: string;
  beforeChannelId: string;
  revision: string;
}

export interface ModifyChannelPositionRequestParams {
  serverId: string;
}

export interface ModifyChannelPositionResponse {
  channels: Array<Channel>;
  revision: string;
}

export interface VoiceMember {
  userId: string;
  userAccountId: string;
  nickname: string;
  nicknameType: number;
  avatar: string;
  avatarType: number;
  muted: boolean;
  mutedWith: number;
  manageable: boolean;
}

export interface ChannelVoice {
  members: Array<VoiceMember>;
}

export interface Channel {
  id: string;
  serverId: string;
  type: number;
  name: string;
  topic: string;
  position: number;
  parentId: string;
  muted: boolean;
  editable: boolean;
  autoCreated: boolean;
  voice?: ChannelVoice;
}

export interface DeleteChannelRequest {}

export interface DeleteChannelRequestParams {
  channelId: string;
}

export interface DeleteChatMessageRequest {}

export interface DeleteChatMessageRequestParams {
  channelId: string;
  messageId: string;
}

export interface GetVoiceChannelRequest {}

export interface GetVoiceChannelRequestParams {
  channelId: string;
}

export interface GetVoiceChannelResponse {
  duration: number;
}

export interface SpeakRequest {}

export interface SpeakRequestParams {
  channelId: string;
}

export interface GetVoiceChannelMemberRequest {}

export interface GetVoiceChannelMemberRequestParams {
  channelId: string;
  userId: string;
}

export interface GetVoiceChannelMemberResponse {
  userId: string;
  userAccountId: string;
  nickname: string;
  nicknameType: number;
  avatar: string;
  avatarType: number;
  muted: boolean;
  mutedWith: number;
  manageable: boolean;
}

export interface GetVoiceChannelMemberAgoraRequest {}

export interface GetVoiceChannelMemberAgoraRequestParams {
  channelId: string;
  userId: string;
}

export interface GetVoiceChannelMemberAgoraResponse {
  userId: string;
  userAccountId: string;
  nickname: string;
  nicknameType: number;
  avatar: string;
  avatarType: number;
  muted: boolean;
  mutedWith: number;
  manageable: boolean;
}

export interface GetVoiceChannelMembersRequest {}

export interface GetVoiceChannelMembersRequestParams {
  channelId: string;
}

export interface VoiceChannelMember {
  userId: string;
  userAccountId: string;
  nickname: string;
  nicknameType: number;
  avatar: string;
  avatarType: number;
  muted: boolean;
  mutedWith: number;
  manageable: boolean;
}

export interface GetVoiceChannelMembersResponse {
  members: Array<VoiceChannelMember>;
}

export interface GetVoiceChannelMembersAgoraRequest {}

export interface GetVoiceChannelMembersAgoraRequestParams {
  channelId: string;
  users: string;
}

export interface GetVoiceChannelMembersAgoraResponse {
  members: Array<VoiceChannelMember>;
}

export interface JoinVoiceChannelRequest {}

export interface JoinVoiceChannelRequestParams {
  channelId: string;
  userId: string;
}

export interface JoinVoiceChannelResponse {
  underlyAppId: string;
  underlyChannelName: string;
  underlyToken: string;
  underlyUserId: number;
}

export interface LeaveVoiceChannelRequest {}

export interface LeaveVoiceChannelRequestParams {
  channelId: string;
  userId: string;
}

export interface ModifyVoiceChannelMemberRequest {
  muted: boolean;
}

export interface ModifyVoiceChannelMemberRequestParams {
  channelId: string;
  userId: string;
}

export interface NicknameItem {
  id: string;
  nickname: string;
  nicknameType: number;
  discriminator: string;
}

export interface NicknameAndAvatarItem {
  id: string;
  nickname: string;
  nicknameType: number;
  discriminator: string;
  avatar: string;
  avatarType: number;
}

export interface CommonImage {
  url: string; // CommonImage's name
  width: string; // CommonImage's height
  height: string; // CommonImage's height
}

export interface CreateAnnouncementRequest {
  title: string; // announcement's title
  content: string; // announcement's content
  entities: Array<MessageEntity>; // announcement's  entities
  images: Array<CommonImage>; // announcement's images
}

export interface CreateAnnouncementRequestParams {
  channelId: string;
}

export interface GetAnnouncementRequest {}

export interface GetAnnouncementRequestParams {
  channelId: string;
  announcementId: string;
}

export interface EmojiData {
  emojiId: string;
  imageName: string;
  count: number;
}

export interface SimpleAnnouncement {
  announcementId: string;
  creator: NicknameItem;
  createdAt: number;
  isPinned: boolean;
  title: string;
  content: string;
  entities: Array<MessageEntity>;
  images: Array<CommonImage>;
  viewCount: number;
  emojis: Array<EmojiData>;
}

export interface DetailAnnouncement {
  announcementId: string;
  creator: NicknameItem;
  createdAt: number;
  isEdited: boolean;
  isPinned: boolean;
  title: string;
  content: string;
  entities: Array<MessageEntity>;
  images: Array<CommonImage>;
  viewCount: number;
  emojis: Array<EmojiData>;
  canEdit: boolean;
  canPin: boolean;
  canDelete: boolean;
}

export interface GetAnnouncementsRequest {}

export interface GetAnnouncementsRequestParams {
  channelId: string;
  offset: number;
}

export interface Announcements {
  total: number;
  list: Array<SimpleAnnouncement>;
  canCreate: boolean;
}

export interface PinAnnouncementRequest {}

export interface PinAnnouncementRequestParams {
  channelId: string;
  announcementId: string;
}

export interface GetPinnedAnnouncementsRequest {}

export interface GetPinnedAnnouncementsRequestParams {
  channelId: string;
  offset: number;
}

export interface UnpinAnnouncementRequest {}

export interface UnpinAnnouncementRequestParams {
  channelId: string;
  announcementId: string;
}

export interface GetSearchAnnouncementsRequest {}

export interface GetSearchAnnouncementsRequestParams {
  channelId: string;
  searchWord: string;
  offset: number;
}

export interface ModifyAnnouncementRequest {
  title: string; // announcement's title
  content: string; // announcement's content
  entities: Array<MessageEntity>; // announcement's  entities
  images: Array<CommonImage>; // announcement's images
}

export interface ModifyAnnouncementRequestParams {
  channelId: string;
  announcementId: string;
}

export interface DeleteAnnouncementRequest {}

export interface DeleteAnnouncementRequestParams {
  channelId: string;
  announcementId: string;
}

export interface GetAnnouncementEmojiDatasRequest {}

export interface GetAnnouncementEmojiDatasRequestParams {
  announcementId: string;
}

export interface AnnouncementEmojiDatas {
  list: Array<EmojiData>;
}

export interface CreateAnnouncementEmojiReactionRequest {
  emojiId: string;
}

export interface CreateAnnouncementEmojiReactionRequestParams {
  announcementId: string;
}

export interface GetAnnouncementEmojiReactionsRequest {
  emojiId: string;
  lastReactionId: string;
}

export interface GetAnnouncementEmojiReactionsRequestParams {
  announcementId: string;
}

export interface AnnouncementEmojiReactions {
  reactionId: string;
  creator: NicknameItem;
}

export interface DeleteAnnouncementEmojiReactionRequest {
  emojiId: string;
}

export interface DeleteAnnouncementEmojiReactionRequestParams {
  announcementId: string;
}

export interface CreateTopicRequest {
  title: string; // topic's title
  content: string; // topic's content
  entities: Array<MessageEntity>; // topic's  entities
  images: Array<CommonImage>; // topic's images
}

export interface CreateTopicRequestParams {
  channelId: string;
}

export interface GetTopicsRequest {}

export interface GetTopicsRequestParams {
  channelId: string;
  sortType: number; // 0:create time;1:hot value;2:lively
  offset: number;
}

export interface SimpleTopic {
  topicId: string;
  creator: NicknameAndAvatarItem;
  createdAt: number;
  isPinned: boolean;
  title: string;
  content: string;
  entities: Array<MessageEntity>; // topic's  entities
  images: Array<CommonImage>;
  replyCount: number;
  viewCount: number;
  emojis: Array<EmojiData>;
}

export interface SimpleTopics {
  total: number;
  list: Array<SimpleTopic>;
  canCreate: boolean;
}

export interface GetTopicRequest {}

export interface GetTopicRequestParams {
  channelId: string;
  topicId: string;
}

export interface DetailTopic {
  topicId: string;
  creator: NicknameAndAvatarItem;
  createdAt: number;
  isEdited: boolean;
  isPinned: boolean;
  floorNum: string;
  title: string;
  content: string;
  entities: Array<MessageEntity>; // topic's  entities
  images: Array<CommonImage>;
  viewCount: number;
  replyCount: number;
  emojis: Array<EmojiData>;
  canEdit: boolean;
  canPin: boolean;
  canDelete: boolean;
  canReply: boolean;
}

export interface PinTopicRequest {}

export interface PinTopicRequestParams {
  channelId: string;
  topicId: string;
}

export interface GetPinnedTopicsRequest {}

export interface GetPinnedTopicsRequestParams {
  channelId: string;
  offset: number;
}

export interface UnpinTopicRequest {}

export interface UnpinTopicRequestParams {
  channelId: string;
  topicId: string;
}

export interface GetSearchTopicsRequest {}

export interface GetSearchTopicsRequestParams {
  channelId: string;
  searchWord: string;
  offset: number;
}

export interface ModifyTopicRequest {
  title: string; // topic's title
  content: string; // topic's content
  entities: Array<MessageEntity>; // topic's  entities
  images: Array<CommonImage>; // topic's images
}

export interface ModifyTopicRequestParams {
  channelId: string;
  topicId: string;
}

export interface DeleteTopicRequest {}

export interface DeleteTopicRequestParams {
  channelId: string;
  topicId: string;
}

export interface GetTopicsEmojiDatasRequest {}

export interface GetTopicsEmojiDatasRequestParams {
  topicId: string;
}

export interface TopicEmojiDatas {
  list: Array<EmojiData>;
}

export interface CreateTopicEmojiReactionRequest {
  emojiId: string;
}

export interface CreateTopicEmojiReactionRequestParams {
  topicId: string;
}

export interface GetTopicEmojiReactionsRequest {
  emojiId: string;
  lastReactionId: string;
}

export interface GetTopicEmojiReactionsRequestParams {
  topicId: string;
}

export interface TopicEmojiReactions {
  reactionId: string;
  creator: NicknameAndAvatarItem;
}

export interface DeleteTopicEmojiReactionRequest {
  emojiId: string;
}

export interface DeleteTopicEmojiReactionRequestParams {
  topicId: string;
}

export interface CreateTopicReplyRequest {
  content: string; // topic's content
  entities: Array<MessageEntity>; // topic's  entities
  images: Array<CommonImage>; // topic's images
  quoteReplyId: string;
}

export interface CreateTopicReplyRequestParams {
  channelId: string;
  topicId: string;
}

export interface GetTopicRepliesRequest {}

export interface GetTopicRepliesRequestParams {
  channelId: string;
  topicId: string;
  sortType: number; // 0:order;1:reverse order
  replyIdType: number; // //1:>replyId,2:<=replyId,3:<replyId
  replyId: string;
}

export interface QuoteTopicReply {
  replyId: string;
  creator: NicknameItem;
  floorNum: string;
  content: string;
  entities: Array<MessageEntity>; // topic's  entities
  isDeleted: boolean;
}

export interface TopicReply {
  replyId: string;
  creator: NicknameAndAvatarItem;
  createdAt: number;
  isEdited: boolean;
  floorNum: string;
  content: string;
  entities: Array<MessageEntity>; // topic's  entities
  quoteReply: QuoteTopicReply;
  images: Array<CommonImage>;
  emojis: Array<EmojiData>;
  canEdit: boolean;
  canDelete: boolean;
}

export interface TopicReplies {
  pageSize: number;
  list: Array<TopicReply>;
}

export interface ModifyTopicReplyRequest {
  content: string; // topic's content
  entities: Array<MessageEntity>; // topic's  entities
  images: Array<CommonImage>; // topic's images
}

export interface ModifyTopicReplyRequestParams {
  channelId: string;
  topicId: string;
  replyId: string;
}

export interface DeleteTopicReplyRequest {}

export interface DeleteTopicReplyRequestParams {
  channelId: string;
  topicId: string;
  replyId: string;
}

export interface GetTopicRepliesEmojiDatasRequest {}

export interface GetTopicRepliesEmojiDatasRequestParams {
  replyId: string;
}

export interface TopicReplyEmojiDatas {
  list: Array<EmojiData>;
}

export interface CreateTopicReplyEmojiReactionRequest {
  emojiId: string;
}

export interface CreateTopicReplyEmojiReactionRequestParams {
  replyId: string;
}

export interface GetTopicReplyEmojiReactionsRequest {
  emojiId: string;
  lastReactionId: string;
}

export interface GetTopicReplyEmojiReactionsRequestParams {
  replyId: string;
}

export interface TopicReplyEmojiReactions {
  reactionId: string;
  creator: NicknameAndAvatarItem;
}

export interface DeleteTopicReplyEmojiReactionRequest {
  emojiId: string;
}

export interface DeleteTopicReplyEmojiReactionRequestParams {
  replyId: string;
}

export interface PermissionSwitch {
  name: string;
  description: string;
  value: string;
  editable: boolean;
  on: boolean;
}

export interface PermissionGroup {
  type: string;
  name: string;
  switchs: Array<PermissionSwitch>;
}

export interface GetPermissionsRequest {}

export interface GetPermissionsRequestParams {
  serverId: string;
  roleId: string;
}

export interface GetPermissionsResponse {
  groups: Array<PermissionGroup>;
}

export interface GetServerApplicationsRequest {}

export interface GetServerApplicationsRequestParams {
  serverId: string;
}

export interface AddServerApplicationsRequest {}

export interface AddServerApplicationsRequestParams {
  serverId: string;
  applicationId: string;
}

export interface RemoveServerApplicationsRequest {}

export interface RemoveServerApplicationsRequestParams {
  serverId: string;
  applicationId: string;
}

export interface GetApplicationsRequest {}

export interface GetApplicationsRequestParams {
  serverId: string;
  offset: number;
}

export interface SearchApplicationsRequest {}

export interface SearchApplicationsRequestParams {
  serverId: string;
  offset: number;
  query: string;
}

export interface GetApplicationInfoRequest {}

export interface GetApplicationInfoRequestParams {
  applicationId: string;
  serverId: string;
}

export interface ApplicationPermission {
  icon: string;
  name: string;
  description: string;
}

export interface ApplicationChangeLog {
  version: string;
  date: number;
  description: string;
}

export interface ApplicationOverview {
  id: string;
  icon: string;
  name: string;
  version: string;
  description: string;
  author: string;
  usedServerCount: number;
  added: boolean;
  isPublic: boolean;
}

export interface Application {
  overview: ApplicationOverview;
  readme: string;
  permissions: Array<ApplicationPermission>;
  changeLogs: Array<ApplicationChangeLog>;
}

export interface ApplicationList {
  total: number;
  applications: Array<ApplicationOverview>;
}

export interface SubmitReportRequest {
  resourceType: number; // 1:"User"; 2:"Server"; 3:"Forum"
  resourceId: string; // like: userId, serverId, forumId, etc
  reason: number; // 1: "Promoting or encouraging spam"; 2:"Abuse or harassment"; 3:"Explicit, graphic, or unwanted sexual content"; 4:"Something else"
  content: string;
  images: Array<string>;
}

export interface GetReportReasonsResponse {
  reasons: Array<string>;
}

export interface UploadPayloadRequest {
  index: number;
  type: number; // 1: avatar, 2: logo, 3: banner, 4: attachment
  contentType: string;
  contentLength: number;
  ownerType: number; // 1: user, 2: server
  ownerId: string; // userId/serverId
}

export interface UploadSignedHeader {
  key: string;
  value: string;
}

export interface UploadPresignedObject {
  index: number;
  type: number;
  urls: string;
  headers: Array<UploadSignedHeader>;
  expiredAt: number;
}

export interface UploadPresignedPart {
  partNumber: number;
  urls: string;
  headers: Array<UploadSignedHeader>;
}

export interface UploadPresignedMultipart {
  uploadId: string;
  size: number;
  parts: Array<UploadPresignedPart>;
}

export interface CreateUploadsRequest {
  payloads: Array<UploadPayloadRequest>;
}

export interface CreateUploadsResponse {
  objects: Array<UploadPresignedObject>;
}

export interface CreateMultipartUploadRequest {
  type: number;
  contentType: string;
  contentLength: number;
  ownerType: number;
  ownerId: string;
  partSize: number;
  partCount: number;
}

export interface CreateMultipartUploadResponse {
  uploadId: string;
  parts: Array<UploadPresignedPart>;
}

export interface CompleteMultipartUploadRequest {}

export interface CompleteMultipartUploadRequestParams {
  uploadId: string;
}

export interface AbortMultipartUploadRequest {}

export interface AbortMultipartUploadRequestParams {
  uploadId: string;
}

export interface GetServerInviteMessageRequest {}

export interface GetServerInviteMessageRequestParams {
  link: string;
}

export interface GetServerInviteMessageResponse {
  serverId: string;
  name: string;
  avatar: string;
  following: string;
  members: string;
  joined: boolean;
}

export interface GetUserContactMessageRequest {}

export interface GetUserContactMessageRequestParams {
  userId: string;
}

export interface GetUserContactMessageResponse {
  avatar: string;
  avatarType: number;
  nickname: string;
  nicknameType: number;
  discriminator: string;
  mutualServers: string;
  mutualFollowing: string;
}

export interface GetVoiceInviteMessageRequest {}

export interface GetVoiceInviteMessageRequestParams {
  link: string;
}

export interface GetVoiceInviteMessageResponse {
  avatar: string;
  name: string;
  joined: boolean;
}

export interface GetBeingFollowedMessageRequest {}

export interface GetBeingFollowedMessageRequestParams {
  userId: string;
}

export interface GetBeingFollowedMessageResponse {
  avatar: string;
  avatarType: number;
  nickname: string;
  discriminator: string;
  mutualServers: string;
  mutualFollowing: string;
}

export interface GetServerTransferredMessageRequest {}

export interface GetServerTransferredMessageRequestParams {
  serverId: string;
}

export interface GetServerTransferredMessageResponse {
  avatar: string;
  name: string;
  following: string;
  members: string;
}

export interface GetLoginMessageRequest {}

export interface GetLoginMessageRequestParams {
  channelId: string;
}

export interface GetLoginMessageResponse {
  code: string;
  address: string;
  userId: string;
}

export interface GetApplicationUrlRequest {}

export interface GetApplicationUrlRequestParams {
  channelId: string;
}

export interface GetApplicationUrlResponse {
  url: string;
}

export interface GetRewardRequest {
  chainId: number;
  claimGaugeId: number;
  startClaimTime: number;
  contractAddr: string;
}

export interface GetRewardResponse {
  claimGaugeId: number;
  claimTime: number;
  amount: number;
}

export interface GetUserInfoRequest {
  userIds: Array<string>;
}

export interface GetUserInfoResponse {
  users: Array<UserBasic>;
}

export interface GetMentionNotificationsRequest {}

export interface GetMentionNotificationsRequestParams {
  filter: number; // 1: @me; 2:@roles; 4:@everyone"; 8:"forum topic"
  dataType: string; // "recently", "earlier"
  lastId: string;
}

export interface MentionChannel {
  id: string;
  name: string;
}

export interface MentionServer {
  id: string;
  name: string;
  avatar: string;
}

export interface MentionTopic {
  id: string;
  title: string;
}

export interface MentionMessage {
  text: string;
  entities: Array<MessageEntity>;
  images: Array<string>;
}

export interface MessageEntity {
  type: string;
  offset: number;
  length: number;
  url: string;
  info: string;
}

export interface MentionSource {
  server: MentionServer;
  channel: MentionChannel;
  forumTopic: MentionTopic;
  forumReplyId: string;
  announcementId: string;
  messageId: string;
}

export interface MentionNotificationItem {
  id: string;
  dataType: string; // "recently", "earlier"
  mentionType: number; // 1:msg;2:topic;3:reply,4:announcement
  mentionLevel: number; // 1:@me;2:@roles;4:@everyone,8:topic reply
  aggregate: boolean; // whether it is an aggregated notification
  senders: Array<UserBasic>;
  mentionTimes: string;
  source: MentionSource;
  message: MentionMessage;
  time: string;
  timestamp: number;
}

export interface GetMentionNotificationsResponse {
  notifications: Array<MentionNotificationItem>;
}

export interface GetSystemNotificationsRequest {}

export interface GetSystemNotificationsRequestParams {
  offset: number;
}

export interface SystemNotificationItem {
  id: string;
  type: number; // 1:user following;2:server transferred;3:server kicked;4:server banned;5:server disbanned;
  user: UserBasic;
  server: MentionServer;
  content: string;
  time: string;
  timestamp: number;
}

export interface GetSystemNotificationsResponse {
  total: number;
  notifications: Array<SystemNotificationItem>;
}

export interface GetAggregateMentionsRequest {}

export interface GetAggregateMentionsRequestParams {
  filter: number; // 2:@roles;4:@everyone,8:topic reply
  dataType: string; // "recently", "earlier"
  serverId: string;
  forumTopicId: string;
  lastId: string;
}

export interface GetAggregateMentionsResponse {
  notifications: Array<MentionNotificationItem>;
}

export interface DeleteMentionNotificationRequest {}

export interface DeleteMentionNotificationRequestParams {
  notificationId: string;
}

export interface DeleteAggregateMentionRequest {}

export interface DeleteAggregateMentionRequestParams {
  notificationId: string;
}

export interface BindTwitterRequest {
  username: string;
}

export interface ServerUnreadItem {
  serverId: string;
  channelId: string;
  unreadCount: number;
}

export interface ServerUnreadList {
  unreadList: Array<ServerUnreadItem>;
}

export interface GetServerUnreadRequest {}

export interface GetServerUnreadRequestParams {
  serverId: string;
}

export interface GetWalletAuthorizedNonceRequest {}

export interface GetWalletAuthorizedNonceRequestParams {
  address: string; // wallet address
  type: number; // 1:"delete account", 2:"bind email"
}

export interface GetWalletAuthorizedNonceResponse {
  nonce: string; // original message of signature
}

export interface ApplyJoinWaitlistRequest {
  name: string;
  email: string;
  address: string;
  twitter: string;
  community: string;
  reason: string;
}
